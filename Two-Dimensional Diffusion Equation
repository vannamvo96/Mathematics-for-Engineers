%%%%% Define the square and grid parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
L=1;  %square is 2L x 2L 
N=100; %# of intervals in x and y directions
n=N+1; %# of gridpoints in x,y directions including boundaries
h=2*L/N;  %grid size in x,y directions
x=-L + (0:N)*h; %x values on the grid
y=-L + (0:N)*h; %y values on the grid
[X,Y]=meshgrid(x,y);
%%%%% Define the indices associated with the boundaries %%%%%%%%%%%%%%%%%%%
% boundary_index = [bottom, left, top, right]
boundary_index=[          1:n,       1:n:1+(n-1)*n, ...
                1+(n-1)*n:n*n,   n:n:n*n           ]; 
%%%%% Diffusion constant and time-step parameters
D=1;
dt=h^2/(2*D); %borderline stability of FTCS scheme
alpha=dt*D/h^2; %equation parameter
nsteps=1000; %number of time steps
%%%%% CONSTRUCT THE MATRIX AND COMPUTE LU DECOMPOSITION %%%%%%%%%%%%%%%%%%%%
diagonals = [-alpha*ones(n^2,2),2*(1+2*alpha)*ones(n^2,1),-alpha*ones(n^2,2)];
A = spdiags(diagonals,[-n, -1,0, 1,n],n^2,n^2);
I = speye(n^2);
A(boundary_index,:)=I(boundary_index,:);
[L1,U1] =lu(A);


%%%%% Define initial conditions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
u=zeros(n,n,nsteps);
sigma=L/4;
u(:,:,1)=1/(2*pi*sigma^2)*exp(-0.5*(X.^2+Y.^2)/sigma^2); 
u(1,:,1)=0; u(n,:,1)=0; u(:,1,1)=0; u(:,n,1)=0; %b.c.
%%%%% ADVANCE SOLUTION u %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
u_prev = u(:,:,1);
u_vec = u_prev(:);
for m=2:nsteps
    b = zeros(n^2,1);
    b(n+1:n^2-n,1) = 2*(1-2*alpha)*u_vec(n+1:n^2-n) + alpha*(u_vec(n+2:n^2-n+1)+u_vec(n:n^2-n-1)+u_vec(1:n^2-2*n)+u_vec(2*n+1:n^2));
    
    %b = 2 * (1 - 2 * alpha) * u_vec + ...
    %    alpha * (circshift(u_vec, 1) + circshift(u_vec, -1) + ...
    %             circshift(u_vec, n) + circshift(u_vec, -n));
    b(boundary_index,1) = u_vec(boundary_index);
    % Solve the linear system using LU decomposition
    u_vec = U1 \ (L1 \ b);

    % Reshape the solution vector back into a 2D grid
    u(:,:,m) = reshape(u_vec, [n, n]);
end
% %%%%% Plot with animation:  UNCOMMENT TO RUN ON MATLAB ONLINE OR DESKTOP %%%
% figure('units','normalized','outerposition',[0 0 1 1])
% s=surf(X,Y,u(:,:,1)); zlim([0, 2.6]);
% xlabel('$x$','Interpreter','latex','FontSize',14); 
% ylabel('$y$','Interpreter','latex','FontSize',14); 
% zlabel('$u(x,y,t)$','Interpreter','latex','FontSize',14); 
% title('Solution of the 2D diffusion equation','Interpreter','latex','FontSize',16);
% pause(1)
% for j=2:nsteps
%     s.ZData=u(:,:,j); pause(0.01);
% end
